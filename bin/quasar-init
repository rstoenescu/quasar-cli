#!/usr/bin/env node

var
  command = require('commander'),
  uid = require('uid'),
  ora = require('ora'),
  download = require('download-git-repo'),
  log = require('../lib/log'),
  qfs = require('../lib/qfs'),
  spinner

command
  .usage('[app template] <folder>')
  .on('--help', function () {
    log('  Example:')
    log()
    log('    # create todoApp folder with latest official app boilerplate:'.gray)
    log('    $ quasar init todoApp')
    log()
    log('    # create todoApp with a specific template, like "default":'.gray)
    log('    $ quasar init default todoApp')
    log()
    log('  List available app templates:')
    log()
    log('    $ quasar list')
  })
  .parse(process.argv)

if (!command.args.length || command.args.length > 2) {
  command.help()
  process.exit(1)
  // ^^^ EARLY EXIT
}

log.info('Generating Quasar App...')
log()

if (command.args.length === 1) {
  create(
    'quasarframework/quasar-template-default',
    command.args[0]
  )
}
else {
  create(
    !command.args[0].indexOf('@') ? command.args[0].slice(1) : 'quasarframework/quasar-template-' + command.args[0],
    command.args[1]
  )
}

function create (template, dest) {
  const templateName = ('@' + template).gray
  dest = qfs.join(process.cwd(), dest)

  if (qfs.exists(dest)) {
    if (qfs.is.empty(dest)) {
      log.warning('Destination folder ' + dest.gray + ' already exists, but is empty. Continuing....')
    }
    else {
      log.fatal('Destination folder ' + dest.gray + ' already exists and is not empty.')
      // ^^^ EARLY EXIT
    }
  }

  var src = '/tmp/quasar-template-' + uid()

  spinner = ora('Downloading App template ' + templateName)
  spinner.start()

  download(
    template,
    src,
    function (err) {
      spinner.stop()
      process.on('exit', function () {
        qfs.remove(src)
      })

      if (err) {
        if (err === 404) {
          log.fatal('Template ' + templateName + ' is not available.')
          // ^^^ EARLY EXIT
        }

        log.fatal('Failed to download App template ' + templateName + ': ' + err)
        // ^^^ EARLY EXIT
      }

      log.success('Downloaded App template ' + templateName)
      generate(template, src, dest)
    }
  )
}

function generate (template, src, dest) {
  if (qfs.copy(qfs.join(src, 'template'), dest)) {
    log.fatal('Failed to copy App template.')
    // ^^^ EARLY EXIT
  }

  log.success('Generated Quasar App in ' + dest.gray)
  log()
  log('  To get started:')
  log()
  log('  $ cd ' + dest.gray)
  log('  # edit package.json'.gray)
  log('  $ npm install')
  log('  $ quasar dev')
}
