#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help'
  },
  boolean: ['h']
})

function showHelp () {
  console.log(`
    Description
      Quickly scaffold a page/layout/component/store module.

    Usage
      $ quasar new [p|page] <page_file_name>
      $ quasar new [l|layout] <layout_file_name>
      $ quasar new [c|component] <page_file_name>
      $ quasar new [s|store] <store_module_name>

      # Examples:

      # Create src/pages/MyNewPage.vue:
      $ quasar new p MyNewPage

      # Create src/layouts/shop/Checkout.vue
      $ quasar new layout shop/Checkout.vue

    Options
      --help, -h     Displays this message
  `)
  process.exit(0)
}

if (argv.help) {
  showHelp()
}

const
  logger = require('../lib/helpers/logger'),
  log = logger('app:new'),
  warn = logger('app:new', 'red'),
  appPaths = require('../lib/build/app-paths'),
  path = require('path'),
  fs = require('fs'),
  fse = require('fs-extra')

if (argv._.length <= 1) {
  console.log()
  warn(`Wrong number of parameters (${argv._.length}).`)
  showHelp()
}

let [ type ] = argv._
let names = argv._.slice(1)

if (!['p', 'page', 'l', 'layout', 'c', 'component', 's', 'store', 'plugin'].includes(type)) {
  console.log()
  warn(`Invalid asset type: ${type}`)
  showHelp()
}

if (type.length === 1) {
  const fullCmd = {
    p: 'page',
    l: 'layout',
    c: 'component',
    s: 'store'
  }
  type = fullCmd[type]
}

const
  mapping = {
    page: {
      folder: 'pages',
      ext: '.vue',
      reference: '',
      reference: 'src/router/routes.js'
    },
    layout: {
      folder: 'layouts',
      ext: '.vue',
      reference: 'src/router/routes.js'
    },
    component: {
      folder: 'components',
      ext: '.vue'
    },
    store: {
      folder: 'store',
      reference: 'src/store/index.js'
    },
    plugin: {
      folder: 'plugins',
      ext: '.js',
      reference: 'quasar.conf.js > plugins'
    }
  },
  asset = mapping[type],
  files = names.map(name => appPaths.resolve.src(path.join(asset.folder, `${name}${asset.ext || ''}`))),
  filesToSave = []

for (let i = 0; i < files.length; i++) {
  if (!fs.existsSync(files[i])) {
    filesToSave.push(files[i])
  } else {
    console.log()
    warn(`A ${type} with ${files[i]} name already exists.`)
  }
}

if (!filesToSave.length) {
  console.log()
  warn(`No files to save.`)
  warn()
  process.exit(1)
}

const src = appPaths.resolve.cli(path.join('templates/app', type + (asset.ext || '')))
for (let i = 0; i < filesToSave.length; i++) {
  (function (file, src) {
    fse.mkdirp(path.dirname(file))
    fse.copy(src, file, (err) => {
      if (err) {
        console.warn(err)
        warn(`Failed to generate the asset ${file} from ${src}.`)
        warn()
        process.exit(1)
      }

      log()
      log(`Generated ${type}: ${path.relative(appPaths.appDir, file)}`)
      if (asset.reference) {
        log(`Make sure to reference it in ${asset.reference}`)
      }
    })
  })(filesToSave[i], src)
}
